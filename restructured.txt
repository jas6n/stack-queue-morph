// Project Identifier: 50EB44D3F029ED934858FFFCEAC3547C68768FC9

#include <iostream>
#include "xcode_redirect.hpp"
#include <getopt.h>
#include <deque>
#include <vector>
using namespace std;


static struct option long_options[] = {
    { "help", no_argument, nullptr, 'h' },
    {"stack", no_argument, nullptr, 's'},
    {"queue", no_argument, nullptr, 'q'},
    {"change", no_argument, nullptr, 'c'},
    {"length", no_argument, nullptr, 'l'},
    {"swap", no_argument, nullptr, 'p'},
    {"begin", required_argument, nullptr, 'b'},
    {"end", required_argument, nullptr, 'e'},
    {"output", required_argument, nullptr, 'o'},
    { nullptr, 0, nullptr, '\0'}
};


struct Word {
    string name;
    size_t prev_word_index = 0;
    bool discovered = false;


};

class Letterman{
public:

Letterman() :  begin(""), end(""), begin_index(0), found_word_index(0), word_count_given(0), number_words_added(0), dict_index(0), choice(0), index(0), words_searched(0), output_format('W'), do_backtrack(false), begin_in(false), end_in(false), change(false), length(false), swap(false), stack(false), queue(false), simple(false){}

void get_commands(int argc, char * argv[]){
    while((choice = getopt_long(argc, argv, "hsqclpb:e:o:", long_options, &index)) != -1){
        switch(choice){
            case 'h':
                cout << "This program morphs one word into another." << endl;
                exit(0);
                break;

            case 's':
                stack = true;
                break;

            case 'q':
                queue = true;
                break;
            
            case 'c':
                change = true;
                break;
            
            case 'l':
                length = true;
                break;

            case 'p':
                swap = true;
                break;

            case 'b': {
                string arg{optarg};
                begin = arg;
                if (begin.empty()){
                    cerr << "Error: Begin word not specified." << endl;
                    exit(1);
                }

                break;
            }

            case 'e': {
                string arg{optarg};
                end = arg;
                if (end.empty()){
                    cerr << "Error: End word not specified." << endl;
                    exit(1);
                }
                break;
            }

            case 'o': {
                char arg{optarg[0]}; 
                if (arg != 'W' && arg != 'M'){ // check if arguments after options are valid
                    cerr << "Error: Wrong arguments." << endl;
                    exit(1);
                }
                output_format = arg;
                break;
            }
                
        }  
    }
}

void check_commands(){
    if (stack == queue){
        cerr << "Conflicting or duplicate stack and queue specified" << endl;
        exit(1);
    } else if (!change && !length && !swap){
        cerr << "Must specify at least one modification mode (change length swap)" << endl;
        exit(1);
    } else if ((swap || change) && !length) {
        if (begin.size() != end.size()){
            cerr << "Error: Cannot get to end from start." << endl;
            exit(1);
        }
    } 
}

void read_dict(){
    string hold;
    cin >> hold;
    cin >> word_count_given;
    if (hold == "S"){
        simple = true;
        dictionary.resize(word_count_given);
        read_simple_dict();
    } else {
        // dictionary.resize(word_count_given * 2);
        simple = false;
        read_complex_dict();
    }

    // check if beginning or end words are in dictionary
    if (!begin_in){
        cerr << "Error: beginning word is not in dictionary." << endl;
        exit(1);
    } 

    if (!end_in){
        cerr << "Error: end word is not in dictionary." << endl;
        exit(1);
    } 

    dictionary.resize(number_words_added);

    }

void add_word_to_dict(const string &dict_word){
    bool read = true;

    if (!length){
        if (begin.size() != dict_word.size()){
            read = false;
        }
    } 

    if (read){
        Word w1;
        w1.name = dict_word;
        // w1.word_index = dict_index;

        if (dict_word == begin){
            begin_index = dict_index;
            begin_in = true;
            w1.discovered = true;
        } else if (dict_word == end){
            end_in = true;
        }

        if (simple){
            dictionary[dict_index] = w1;
        } else {
            dictionary.push_back(w1);
        }
        dict_index += 1;
        number_words_added += 1;
    }

}

bool is_comment(const string &s){
    if (s[0] == '/' && s[1] == '/'){
        return true;
    }
    return false;
}

void read_simple_dict(){
    string dict_word = "";

    while(cin >> dict_word){
        if(is_comment(dict_word)){ // check if it is comment
            getline(cin, dict_word);
        } else {
            add_word_to_dict(dict_word);
        }
    }
}

void read_complex_dict(){


    string dict_word = "";

    while (cin >> dict_word){

        if (is_comment(dict_word)){
            getline(cin, dict_word);
        } else {

            bool found_symbol = false;

            if (found_ambersand(dict_word)){
                string s1 = "";
                string s2 = "";

                for (size_t i = 0; i < dict_word.size() - 1; ++i){
                    s1 += dict_word[i];
                    s2 += dict_word[dict_word.size() - 2 - i];
                }

                add_word_to_dict(s1);
                add_word_to_dict(s2);

                found_symbol = true;

            } else {

                for (size_t i = 0; i < dict_word.size(); ++i){ // loop through every letter in the word to find symbol
                    if (dict_word[i] == '['){
                        // find index of ] symbol
                        size_t end_bracket = 0;


                        // finds index of //
                        for (size_t k = 3; k < dict_word.size(); ++k){
                            if (dict_word[i + k] == ']'){
                                end_bracket = k;
                                break;
                            }
                        }

                        for (size_t l = 0; l < end_bracket - 1; ++l){
                            // make it so each instance of loop adds a word to the deque
                            string s = "";
                            for (size_t m = 0; m < i; ++m){
                                s += dict_word[m];
                            }
                            s += dict_word[i + 1 + l];

                            for (size_t m = i + end_bracket + 1; m < dict_word.size(); ++m){
                                s += dict_word[m];
                            }


                            add_word_to_dict(s);
                        }

                        found_symbol = true;
                        break;


                    } else if (dict_word[i] == '!'){

                        string s1 = "";
                        string s2 = "";

                        size_t j = 0;
                        while (j < dict_word.size()){
                            if (j == i - 2) {
                                s1 += dict_word[j];
                                s1 += dict_word[j+1];
                                s2 += dict_word[j+1];
                                s2 += dict_word[j];
                                j += 3;
                            } else {
                                s1 += dict_word[j];
                                s2 += dict_word[j];
                                j += 1;
                            }
                        }

                        add_word_to_dict(s1);
                        add_word_to_dict(s2);

                        found_symbol = true;
                        break;

                    } else if (dict_word[i] == '?'){
                        string s1 = "";
                        string s2 = "";


                        size_t j = 0;
                        while (j < dict_word.size()){
                            if (j == i - 1) {
                                s1 += dict_word[j];
                                s2 += dict_word[j];
                                s2 += dict_word[j];
                                j += 2;
                            } else {
                                s1 += dict_word[j];
                                s2 += dict_word[j];
                                j += 1;
                            }
                        }

                        add_word_to_dict(s1);
                        add_word_to_dict(s2);

                        found_symbol = true;
                        break;


                    }
                }

                
            }

            if (!found_symbol){
                add_word_to_dict(dict_word);
            }

        }
    }

}

bool found_ambersand(const string &s1){

    if (s1[s1.size() - 1] == '&'){
        return true;
    } 
    return false;
}

bool add_to_bundle(const Word &current, const Word &compare){
    if ((current.name.size() == compare.name.size() + 1) || current.name.size() + 1 == compare.name.size()
     || (current.name.size() == compare.name.size())){
       
    } else {
        return false;
    }

    if (change){
        if (check_change(current, compare)){
            return true;
        }
    }
    if (length){
        if (check_length(current, compare)){
            return true;
        }

    }
    if (swap){
         if (check_swap(current, compare)){
            return true;
        }

    }

    return false;
}

bool check_change(const Word &w1, const Word &w2){
        int count = 0;

    if (w1.name.size() != w2.name.size()){
        return false;
    } 

    for (size_t i = 0; i < w1.name.size(); ++i){
        if (w1.name[i] != w2.name[i]){
            count += 1;
        }
    }
    if (count == 1){
        return true;
    } else {
        return false;
    }

}

bool check_length(const Word &w1, const Word &w2){
    if (w1.name.size() == w2.name.size()){
        return false;
    }

    string smaller;
    string bigger;
    int count = 0;
    if (w1.name.size() < w2.name.size()){
        smaller = w1.name;
        bigger = w2.name;
    } else{
        smaller = w2.name;
        bigger = w1.name;
    }

    if ((bigger.size() - smaller.size()) >= 2){
        return false;
    }


    size_t i = 0;
    size_t j = 0;
    while (i < smaller.size()){
        if (smaller[i] != bigger[j]){
            count += 1;
            if (count >= 2){
                return false;
            }
            j += 1;
        } else {
            i += 1;
            j += 1;
        }

    }
    return true;  

}

bool check_swap(const Word &w1, const Word &w2){
    if (w2.name.size() != w1.name.size()){
        return false;
    } 

    int count = 0;

    size_t i = 0;


    for (size_t j = 0; j < w1.name.size(); ++j){
        if (w1.name[j] != w2.name[j]){
            count += 1;
            i = j;
        }
    }

    if (count == 2){
        if ((w1.name[i] == w2.name[i-1]) && (w1.name[i-1] == w2.name[i])){
        return true;
        } else {
        return false;
        }
    } else {
        return false;
    }

}



void search(){
    size_t current = begin_index;

    deque<size_t> bundle; 

    bundle.push_front(begin_index);
    words_searched += 1;

    bool continue_search = true;

    while (continue_search){
        // check type of bundle
        if (queue){
            current = bundle.back();
            bundle.pop_back();
        } else {
            current = bundle.front();
            bundle.pop_front();
        }

        // loop through all words in dictionary that have been added, not total number
        for (size_t i = 0; i < number_words_added; ++i){
            if (!dictionary[i].discovered){
                if (add_to_bundle(dictionary[current], dictionary[i])){
                    words_searched += 1;
                    dictionary[i].discovered = true;
                    dictionary[i].prev_word_index = current;
                    if (dictionary[i].name == end){
                        continue_search = false;
                        do_backtrack = true;
                        found_word_index = i;
                        break;
                    }
                    bundle.push_front(i);

                }
            }

        }

        if (bundle.empty()){
            continue_search = false;
        }

    }


}

void show_regular(){
    for (size_t i = 0; i < output.size(); ++i){
        cout << output[i].name << endl;
    }
}

void show_mod(){
    cout << output[0].name << endl;
    for (size_t i = 1; i < output.size(); ++i){
            if (check_change(output[i-1], output[i])){
                size_t position = 0;
                char letter = '\0';

                for (size_t j = 0; j < output[i].name.size(); ++j){
                    if (output[i-1].name[j] != output[i].name[j]){
                        position = j;
                        letter = output[i].name[j];
                        break;
                    }
                }

                cout << "c," << position << "," << letter << endl;

            } else if (check_length(output[i-1], output[i])){

                if (output[i-1].name.size() < output[i].name.size()){
                    size_t position = 0;
                    char letter = '\0';

                    for (size_t j = 0; j < output[i].name.size() + 1; ++j){
                        if (output[i-1].name[j] != output[i].name[j]){
                            letter = output[i].name[j];
                            position = j;
                            break;
                        } 
                    }

                    cout << "i," << position << "," << letter << endl;
                } else {
                    size_t position = 0;
                    for (size_t j = 0; j < output[i-1].name.size() + 1; ++j){
                        if (output[i-1].name[j] != output[i].name[j]){
                            position = j;
                            break;
                        }
                    }
                    cout << "d," << position << endl;
                }


            } else {
                size_t position = 0;
                for (size_t j = 0; j < output[i].name.size(); ++j){
                        if (output[i-1].name[j] != output[i].name[j]){
                            position = j;
                            break;
                        }
                    }
                cout << "s," << position << endl;
            }
        }

}

void backtrack(){
    if (do_backtrack){
        // add first word to output deque
        bool cont = true;
        output.push_front(dictionary[found_word_index]);

        while (cont){
            size_t ind;
            ind = output[0].prev_word_index;
            output.push_front(dictionary[ind]);

            if (dictionary[ind].name == begin){
                cont = false;
            }
        }

        size_t words_in_morph = output.size();

        cout << "Words in morph: " << words_in_morph << endl;

        if (output_format == 'W'){
            show_regular();
        } else {
            show_mod();
        }


    } else {
        cout << "No solution, " << words_searched << " words discovered." << endl;
    }
}



private:
vector<Word> dictionary;
deque<Word> output;
string begin;
string end;
size_t begin_index;
size_t found_word_index;
size_t word_count_given;
size_t number_words_added;
size_t dict_index;
int choice;
int index;
int words_searched;
char output_format;
bool do_backtrack;
bool begin_in;
bool end_in;
bool change;
bool length;
bool swap;
bool stack;
bool queue;
bool simple;

};


int main(int argc, char* argv[]){
    ios_base::sync_with_stdio(false);




    Letterman man;

    // read in command line
    man.get_commands(argc, argv);
    man.check_commands();

    // read in dictionary
    man.read_dict();

    // search words
    man.search();
    // output words
    man.backtrack();


return 0;
}

// to do - resize vectors 


